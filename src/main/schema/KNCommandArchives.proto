syntax = "proto3";

import "TSPMessages.proto";
import "TSKArchives.proto";
import "TSSArchives.proto";
import "TSDArchives.proto";
import "KNArchives.proto";
package KN;

message UIStateCommandGroupArchive {
  optional .TSK.CommandGroupArchive super = 1;
  optional .TSP.Reference uiState = 2;
  optional string property = 3;
  repeated .TSP.Reference slideNodesToEdit = 4;
  repeated .TSP.Reference masterSlideNodesToApply = 5;
  repeated .TSP.Size thumbnailSizes = 6;
  repeated .TSP.Reference selectedSlideNodes = 7;
  repeated .TSP.Reference restoreSelectedSlideNodes = 8;
}

message CommandSlideInsertDrawablesArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  repeated .TSP.Reference drawables = 3;
  optional bool forDrag = 4;
  optional int32 atIndex = 5;
  optional bool use_object_placeholder_geometry = 6;
}

message CommandSlideSetPlaceholdersForTagsArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  repeated .TSP.Reference infos = 3;
  repeated string tags = 4;
  repeated .TSP.Reference old_infos = 6;
  repeated string old_tags = 5;
}

message CommandSlideRemoveDrawableArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  repeated .TSP.Reference sortedDrawables = 3;
  optional .TSP.IndexSet drawableIndices = 4;
  repeated string placeholderTags = 5;
  optional .TSP.Reference info_using_object_placeholder_geometry = 6;
  optional bool did_match_object_placeholder_geometry = 7;
}

message CommandSlideMoveDrawableZOrderArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  repeated .TSP.Reference infos = 3;
  repeated .TSP.Reference old_ordered_infos = 4;
  optional .TSP.IndexSet indexes = 5;
}

message CommandSlidePasteDrawablesArchive {
  optional .TSK.CommandArchive super = 1;
  repeated .TSP.Reference commands = 2;
  optional .TSP.Reference slide = 3;
  repeated .TSP.Reference drawables = 4;
  optional bool has_builds = 5;
}

message CommandSlideNodeSetPropertyArchive {
  message PropertyValue {
    optional bool boolValue = 1;
    optional .TSP.DataReference image = 3;
    optional .TSP.Reference database_image = 2;
  }
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  optional string property = 3;
  optional .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
  optional .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
}

message CommandSlideSetValueArchive {
  message PropertyValue {
    optional bool boolValue = 1;
    optional .TSP.Reference objectValue = 2;
    optional .TSD.FillArchive fill = 3;
  }
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  optional string property = 3;
  optional .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
  optional .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
  optional .TSP.Reference oldSlideStyle = 6;
}

message CommandSlideSetStyleArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  optional .TSP.Reference slide_style = 3;
  optional .TSP.Reference old_slide_style = 4;
}

message CommandShowMarkOutOfSyncRecordingArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference old_recording = 3;
}

message CommandShowRemoveRecordingArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference old_recording = 3;
}

message CommandShowReplaceRecordingArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference replacement_recording = 3;
  optional double replacement_start_time = 4;
  optional .TSP.Reference old_recording = 5;
}

message CommandShowSetValueArchive {
  message PropertyValue {
    optional bool bool_value = 1;
    optional double double_value = 2;
    optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
    optional .TSP.Size size_value = 4;
  }
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional string property = 3;
  optional .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  optional .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
}

message CommandShowInsertSlideArchive {
  enum Kind {
    kKindInsertSlide = 0;
    kKindInsertSlideForPaste = 1;
    kKindInsertSlideForDuplicate = 2;
  }
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference slideNode = 3;
  optional uint32 childIndex = 4;
  optional .TSP.Reference parentSlideNode = 5;
  optional .KN.CommandShowInsertSlideArchive.Kind kind = 6;
}

message CommandShowMoveSlideArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference slideNode = 3;
  repeated .TSP.Reference parentSlideNodes = 4;
  repeated uint32 childIndices = 5;
}

message CommandShowRemoveSlideArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference slideNode = 3;
  optional .TSP.Reference parentSlideNode = 4;
  optional uint32 childIndex = 5;
}

message CommandShowChangeThemeArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference theme = 3;
  optional .TSP.Reference old_theme = 4;
  optional string template_identifier = 5;
  optional string old_template_identifier = 6;
}

message CommandMoveMastersArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference theme = 2;
  repeated .TSP.Reference master_slides = 3;
  repeated .TSP.Reference previous_indexes_keys = 4;
  repeated uint32 previous_indexes_values = 5;
  repeated .TSP.Reference final_master_arrangement = 6;
}

message CommandInsertMasterArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference theme = 2;
  optional .TSP.Reference master_slide_node = 3;
  optional uint32 insertion_index = 4;
  optional bool was_inserted_with_drop = 5;
}

message CommandRemoveMasterArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference theme = 2;
  optional .TSP.Reference master_slide_node = 3;
  optional uint32 previous_index = 4;
  optional .TSP.Reference master_change_commands = 5;
}

message CommandRenameMasterArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference master_slide = 2;
  optional string master_name = 3;
  optional string old_master_name = 4;
}

message CommandSlideInsertBuildArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  optional .TSP.Reference build = 3;
  optional uint32 index = 4;
  optional bool shouldCreateChunks = 5;
}

message CommandSlideRemoveBuildArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  optional .TSP.Reference build = 3;
  optional uint32 index = 4;
}

message CommandSlideMoveBuildWithoutMovingChunksArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  optional uint32 index = 3;
  optional uint32 oldIndex = 4;
}

message CommandSlideMoveBuildsArchive {
  optional .TSK.CommandArchive super = 1;
  repeated .TSP.Reference builds = 2;
  optional uint32 toIndex = 3;
}

message CommandSlideInsertBuildChunkArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  optional .KN.BuildChunkArchive buildChunk = 3;
  optional uint32 index = 4;
}

message CommandSlideRemoveBuildChunkArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  optional .KN.BuildChunkArchive buildChunk = 3;
  optional uint32 index = 4;
}

message CommandSlideMoveBuildChunkArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  optional uint32 index = 3;
  optional uint32 oldIndex = 4;
}

message CommandSlideMoveBuildChunksArchive {
  optional .TSK.CommandArchive super = 1;
  repeated .KN.BuildChunkArchive buildChunks = 2;
  optional uint32 toIndex = 3;
}

message CommandBuildSetValueArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference build = 2;
  optional string property = 3;
  repeated string effects = 4;
  repeated string types = 5;
  repeated string deliveries = 6;
  repeated uint32 directions = 7;
  repeated double durations = 8;
  repeated double delays = 9;
  repeated double delayAutomaticAfters = 10;
  repeated double delayAutomaticWiths = 11;
  repeated bool eventTriggers = 12;
}

message CommandBuildChunkSetValueArchive {
  optional .TSK.CommandArchive super = 1;
  optional .KN.BuildChunkArchive buildChunk = 2;
  optional string property = 3;
  repeated uint32 referents = 4;
  repeated bool automatics = 5;
  repeated double durations = 6;
  repeated double delays = 7;
  optional bool oldOwnsValue = 8;
}

message CommandTransitionSetValueArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slideNode = 2;
  optional string property = 3;
  repeated string effects = 4;
  repeated string unused = 5;
  repeated string unused2 = 6;
  repeated string unused3 = 7;
  repeated double durations = 8;
  repeated uint32 directions = 9;
  repeated bool isAutomatics = 10;
  repeated double delays = 11;
}

message CommandShowSetSlideNumberVisibilityArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional bool slideNumbersVisible = 3;
  optional .TSP.Reference providerUndo = 4;
}

message CommandMasterRescaleArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference master = 2;
}

message CommandMasterSetThumbnailTextArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference master = 2;
  optional bool is_body = 3;
  optional string new_text = 4;
  optional string old_text = 5;
}

message CommandMasterSetBodyStylesArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference master = 2;
  repeated .TSP.Reference new_paragraph_styles = 3;
  repeated .TSP.Reference new_list_styles = 4;
  repeated .TSP.Reference old_paragraph_styles = 5;
  repeated .TSP.Reference old_list_styles = 6;
}

message CommandSlideApplyThemeArchive {
  optional .TSS.ApplyThemeChildCommandArchive super = 1;
  optional .KN.MasterChangeBlobArchive blob = 2;
}

message CommandChangeMasterSlideArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  optional .TSP.Reference master = 3;
  optional .TSP.Reference placeholder_commands = 4;
}

message CommandSlidePrimitiveSetMasterArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference slide = 2;
  optional .TSP.Reference master = 3;
  optional .TSP.Reference old_master = 4;
}

message CommandSlideReapplyMasterArchive {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference reapply_accumulated_command = 2;
}

message CommandShowSetSoundtrack {
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference soundtrack = 3;
  optional .TSP.Reference old_soundtrack = 4;
}

message CommandSoundtrackSetValue {
  message PropertyValue {
    optional double double_value = 1;
    optional SoundtrackMode mode_value = 2;
    repeated .TSP.DataReference media_reference_values = 3;
  }
  optional .TSK.CommandArchive super = 1;
  optional .TSP.Reference soundtrack = 2;
  optional string property = 3;
  optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
}

message SlideCollectionCommandSelectionBehaviorArchive {
  enum Type {
    kKindSlideSelectionBehaviorTypeGeneral = 0;
    kKindSlideSelectionBehaviorTypeInsertion = 1;
    kKindSlideSelectionBehaviorTypeDeletion = 2;
    kKindSlideSelectionBehaviorTypeMove = 3;
  }
  optional .TSP.Reference archived_new_selection = 1;
  optional .TSP.Reference archived_old_selection = 2;
  optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3;
}

message ChartInfoGeometryCommandArchive {
  optional .TSK.CommandArchive super = 1;
}

